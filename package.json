{
  "name": "ai-wingman",
  "displayName": "Wingman",
  "version": "1.3.18",
  "description": "Your pair programming wingman, powered by ChatGPT, Claude, or your local LLaMa.",
  "publisher": "nvms",
  "private": true,
  "preview": true,
  "author": {
    "name": "nvms"
  },
  "license": "SEE LICENSE IN LICENSE",
  "homepage": "https://github.com/nvms/wingman/blob/master/README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/nvms/wingman"
  },
  "bugs": {
    "url": "https://github.com/nvms/wingman/issues"
  },
  "keywords": [
    "chatgpt",
    "ai",
    "chat",
    "gpt",
    "gpt3",
    "gpt4",
    "llama",
    "localai",
    "wingman",
    "copilot",
    "generation",
    "code generation",
    "refactoring",
    "debugging"
  ],
  "categories": [
    "Other"
  ],
  "main": "./out/extension.js",
  "icon": "assets/logo.png",
  "engines": {
    "vscode": "^1.76.2"
  },
  "badges": [
    {
      "url": "https://img.shields.io/badge/PRs-welcome-brightgreen.svg",
      "description": "PRs Welcome",
      "href": "https://github.com/nvms/wingman"
    }
  ],
  "activationEvents": [],
  "contributes": {
    "viewsContainers": {
      "panel": [
        {
          "id": "wingman",
          "title": "Wingman",
          "icon": "assets/logo.png"
        }
      ]
    },
    "views": {
      "wingman": [
        {
          "type": "webview",
          "id": "wingman.mainView",
          "name": "Prompts"
        },
        {
          "type": "webview",
          "id": "wingman.configView",
          "name": "Configuration"
        },
        {
          "type": "webview",
          "id": "wingman.secondaryView",
          "name": "Conversation"
        }
      ]
    },
    "commands": [
      {
        "command": "wingman.setApiKey",
        "title": "Wingman: Set API key"
      }
    ],
    "configuration": {
      "title": "Wingman",
      "properties": {
        "wingman.requestTimeoutMs": {
          "order": 1,
          "type": "number",
          "default": 60000,
          "description": "Request timeout in milliseconds"
        },
        "wingman.showProviderLogo": {
          "order": 6,
          "type": "boolean",
          "default": false,
          "description": "Show the provider logo for each command in the command list"
        },
        "wingman.context.ignore.useGitignore": {
          "order": 9,
          "type": "boolean",
          "default": true,
          "description": "Ignore paths defined in .gitignore when calculating context"
        },
        "wingman.context.include.permittedFileExtensions": {
          "type": "array",
          "description": "File extensions to find when calculating context. Empty array means all extensions are matched.",
          "default": [
            "js",
            "ts",
            "jsx",
            "tsx",
            "cpp",
            "py",
            "go",
            "java",
            "html",
            "css",
            "php",
            "rb",
            "cs",
            "swift",
            "kt",
            "scala",
            "h",
            "m",
            "mm",
            "c",
            "cc",
            "cxx",
            "hxx",
            "hpp",
            "hh",
            "s",
            "asm",
            "pl",
            "pm",
            "t",
            "r",
            "sh"
          ]
        },
        "wingman.context.ignore.additionalIgnorePaths": {
          "order": 10,
          "type": "array",
          "default": [
            "**/node_modules/**",
            "**/dist/**",
            "**/out/**",
            "**/build/**",
            "**/media/**",
            "**/assets/**",
            "**/.github/**",
            "**/.vscode/**",
            "**/.vscode-test/**",
            "**/",
            "**/package.json",
            "**/.gitignore",
            "**/.git/**"
          ],
          "description": "Filepaths to ignore when calculating context, in addition to .gitignore (if useGitignore is enabled)"
        },
        "wingman.showBuiltinCommands": {
          "order": 7,
          "type": "boolean",
          "default": true,
          "description": "Show the built-in commands in the command list"
        },
        "wingman.showCommandDescriptions": {
          "order": 8,
          "type": "boolean",
          "default": true,
          "description": "Show command descriptions in the command list"
        },
        "wingman.userCommands": {
          "order": 1,
          "type": "array",
          "default": [
            {
              "command": "exImprove",
              "label": "Suggest improvements",
              "userMessageTemplate": "I have the following {{language}} code:\n```{{filetype}}\n{{text_selection}}\n```\nPlease provide a list of suggestions for improving the code in markdown format. Consider aspects such as readability, performance, maintainability, and best coding practices. Explain each suggestion briefly, highlighting the specific areas that could be enhanced. Your suggestions should aim to improve the code without changing its behavior.",
              "systemMessageTemplate": "You are an assistant to a {{language}} developer.",
              "callbackType": "none",
              "category": "My prompts"
            }
          ],
          "items": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "default": "",
                "description": "The name of the command to register (e.g. wingman.myCommand). Must be unique, or it will override an existing command (override the builtins if you'd like!)"
              },
              "label": {
                "type": "string",
                "default": "",
                "description": "The label of the command is what shows up in the button text in the UI."
              },
              "description": {
                "type": "string",
                "default": "",
                "description": "The description of the command. Shows up in the command list in the UI, under the label, when `wingman.showCommandDescriptions` is true."
              },
              "userMessageTemplate": {
                "type": "string",
                "default": "",
                "description": "The prompt to send, which can include string interpolations, e.g.: 'I have the following {{language}} code: {{text_selection}}. Please find and fix the bugs!'"
              },
              "systemMessageTemplate": {
                "type": "string",
                "default": "",
                "description": "System message template, which can include string interpolations, e.g.:  'You are an assistant to a {{language}} software developer.'"
              },
              "callbackType": {
                "type": "string",
                "default": "buffer",
                "enum": [
                  "none",
                  "buffer",
                  "replace",
                  "beforeSelected",
                  "afterSelected"
                ],
                "description": "This defines what wingman does when the model finishes replying with a block of code. 'buffer' (currently not implemented), 'replace' (replaces the selected text with the model's response), 'beforeSelected' (inserts the model's response before the selected text), 'afterSelected' (inserts the model's response after the selected text on the next line)."
              },
              "category": {
                "type": "string",
                "default": "Default",
                "description": "What UI category should this command button live under?"
              },
              "temperature": {
                "type": "number",
                "default": 0.3,
                "description": "Temperature."
              },
              "languageInstructions": {
                "type": "object",
                "description": "A map of languageId to instruction. Replaces {{language_instructions}} in userMessaageTemplate and systemMessageTemplate"
              },
              "provider": {
                "type": "string",
                "default": "openai",
                "enum": [
                  "anthropic",
                  "openai",
                  "goinfer",
                  "koboldcpp"
                ],
                "description": "Which provider should this command use?"
              }
            }
          },
          "description": "User-defined prompt command templates."
        }
      }
    }
  },
  "eslintConfig": {
    "extends": "@yutengjing/eslint-config-typescript",
    "ignorePatterns": [
      "test-workspace"
    ]
  },
  "prettier": {
    "singleQuote": false,
    "trailingComma": "all",
    "printWidth": 180,
    "tabWidth": 2,
    "semi": true
  },
  "lint-staged": {
    "*.{js,ts,json,md}": [
      "eslint --fix",
      "prettier --write"
    ]
  },
  "simple-git-hooks": {
    "pre-commit": "npx lint-staged"
  },
  "scripts": {
    "vscode:prepublish": "pnpm esbuild:base --minify",
    "preinstall": "npx only-allow pnpm",
    "postinstall": "stale-dep -u",
    "clean": "rimraf -rf ./out",
    "esbuild:base": "stale-dep && tsx scripts/esbuild.ts",
    "esbuild:watch": "pnpm esbuild:base --sourcemap --watch",
    "esbuild:analyze": "pnpm esbuild:base --minify --metafile --analyze && esbuild-visualizer --metadata ./meta.json --open",
    "compile:test": "pnpm clean && tsc -b ./test/tsconfig.json",
    "lint": "eslint src --ext ts",
    "test": "stale-dep && pnpm compile:test && node ./out/test/runTests.js",
    "package": "vsce package --no-dependencies",
    "release": "bumpp -c \"release: v%s\" package.json",
    "publish:vs-marketplace": "vsce publish --no-dependencies",
    "publish:open-vsx": "ovsx publish --no-dependencies",
    "prepare": "simple-git-hooks"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "^18.16.16",
    "@types/vscode": "^1.76.2",
    "@vscode/test-electron": "^2.3.2",
    "@vscode/vsce": "^2.19.0",
    "@yutengjing/eslint-config-typescript": "^0.4.1",
    "@yutengjing/prettier-config": "^0.0.1",
    "bumpp": "^9.1.0",
    "esbuild": "^0.17.19",
    "esbuild-visualizer": "^0.4.0",
    "eslint": "^8.41.0",
    "glob": "^10.2.6",
    "lint-staged": "^13.2.2",
    "mocha": "^10.2.0",
    "ovsx": "^0.8.1",
    "prettier": "^2.8.8",
    "rimraf": "^5.0.1",
    "simple-git-hooks": "^2.8.1",
    "stale-dep": "^0.6.0",
    "ts-loader": "^9.4.3",
    "tsx": "^3.12.7",
    "typescript": "^5.0.4"
  },
  "dependencies": {
    "@ai-zen/node-fetch-event-source": "^2.1.0",
    "@anthropic-ai/tokenizer": "^0.0.4",
    "@vscode/webview-ui-toolkit": "^1.2.2",
    "chatgpt": "^5.2.5",
    "cheerio": "1.0.0-rc.12",
    "fast-glob": "^3.2.12",
    "fetch": "^1.1.0",
    "gpt-tokenizer": "^2.1.1",
    "llama-tokenizer-js": "^1.1.3",
    "node-fetch": "^3.3.1"
  }
}
